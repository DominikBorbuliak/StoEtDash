@using Newtonsoft.Json;
@using StoEtDash.Web.Database.Models;
@using StoEtDash.Web.Models;
@model DashboardViewModel;

@{
	ViewData["Title"] = "Dashboard";
}

@section Styles {
	<link rel="stylesheet" href="~/css/dashboard.css"/>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
}

@await Html.PartialAsync("_TransactionListModal")
@await Html.PartialAsync("_EditTransactionModal")

@await Html.PartialAsync("_BuyTransactionModal", new TransactionViewModel {
	ActionType = TransactionActionType.Buy
})

@await Html.PartialAsync("_SellTransactionModal", new TransactionViewModel {
	ActionType = TransactionActionType.Sell
})

<div class="widget-card-container">
	<div class="widget-card">
		<div class="widget-card-heading">Portfolio</div>
		<div class="widget-card-row">
			<div class="widget-card-label">Current portfolio value</div>
			<div class="widget-card-value">@($"{Model.PortfolioValue.ToString("0.00")} €")</div>
		</div>
	</div>
	<div class="widget-card">
		<div class="widget-card-heading">Investments</div>
		<div class="widget-card-row">
			<div class="widget-card-label">Total amount invested (includign fees)</div>
			<div class="widget-card-value">@($"{Model.InvestedValue.ToString("0.00")} €")</div>
		</div>
		<div class="widget-card-row">
			<div class="widget-card-label">Total fees paid</div>
			<div class="widget-card-value">@($"{Model.FeesPaid.ToString("0.00")} €")</div>
		</div>
	</div>
	<div class="widget-card">
		<div class="widget-card-heading">Returns</div>
		<div class="widget-card-row">
			<div class="widget-card-label">Current return value</div>
			<div class="widget-card-value">@($"{(Model.PortfolioValue - Model.InvestedValue).ToString("0.00")} €")</div>
		</div>
	</div>
	<div class="widget-card">
		<div class="widget-card-heading">Dividends</div>
		<div class="widget-card-row">
			<div class="widget-card-label">Expected dividends</div>
			<div class="widget-card-value">@($"{Model.ExpectedDividends.ToString("0.00")} €")</div>
		</div>
	</div>
</div>

<table>
	<thead>
		<tr>
			<th>Name</th>
			<th>No. of shares</th>
			<th>Invested Value</th>
			<th>Fees Paid</th>
			<th>Average Price</th>
			<th>Price / Share</th>
			<th>Expected Dividends</th>
			<th>
				<button type="button" data-bs-toggle="modal" data-bs-target="#buy-transaction-modal" class="button button-primary">BUY</button>
			</th>
		</tr>
	</thead>
	@{
		if (Model?.Assets?.Any() == true)
		{
			<tbody>
				@foreach (var asset in Model.Assets)
				{
					await Html.RenderPartialAsync("_Asset", asset);
				}
			</tbody>
		}
		else
		{
			<tfoot>
				<tr style="position: relative">
					<th style="border: 0">
						<div style="position: absolute; width: 100%; left: 0; right: 0; text-align: center">
							No available assets
						</div>
					</th>
				</tr>
			</tfoot>
		}
	}
</table>

<div class="chart-row">
	<div class="chart-wrapper">
		<div class="chart-heading-wrapper">
			<label class="chart-heading">Assets by</label>
			<select id="assets-chart-select" class="chart-select" onChange="onAssetsChartSelect()">
				<option value="value">Value</option>
				<option value="shares">Shares</option>
			</select>
		</div>
		<canvas class="chart" id="assets-chart"></canvas>
		<div class="chart-legend-wrapper" id="assets-chart-legend"></div>
	</div>

	<div class="chart-wrapper chart-wrapper-wide">
		<div class="chart-heading-wrapper">
			<select id="prices-chart-select" class="chart-select chart-select-rtl" onChange="onPricesChartSelect()">
				<option value="daily">Daily</option>
				<option value="weekly">Weekly</option>
				<option value="monthly">Monthly</option>
			</select>
			<label class="chart-heading">Prices</label>
		</div>
		<canvas class="chart" id="prices-chart"></canvas>
		<div class="chart-legend-wrapper" id="prices-chart-legend"></div>
	</div>

	<div class="chart-wrapper">
		<div class="chart-heading-wrapper">
			<label class="chart-heading">Dividend / Other</label>
		</div>
		<canvas class="chart" id="dividend-vs-other-chart"></canvas>
		<div class="chart-legend-wrapper" id="dividend-vs-other-chart-legend"></div>
	</div>
</div>

@section Scripts {
	<script src="./js/chart.js"></script>
	<script src="./js/dashboard.js"></script>
	<script>
		const assetsChart = createChart(
			'doughnut',
			@Html.Raw(JsonConvert.SerializeObject(@Model?.AssetsByValue)),
			'assets-chart',
			'assets-chart-legend'
		);

		const pricesChart = createChart(
			'line',
			@Html.Raw(JsonConvert.SerializeObject(@Model?.DailyPricesChart)),
			'prices-chart',
			'prices-chart-legend'
		);

		_ = createChart(
			'doughnut',
			@Html.Raw(JsonConvert.SerializeObject(@Model?.DividendVsOtherChart)),
			'dividend-vs-other-chart',
			'dividend-vs-other-chart-legend'
		);

		const onPricesChartSelect = () => {
			const value = document.getElementById("prices-chart-select").value;

			if (value === 'daily') {
				pricesChart.data = @Html.Raw(JsonConvert.SerializeObject(@Model?.DailyPricesChart))
			} else if (value === 'weekly') {
				pricesChart.data = @Html.Raw(JsonConvert.SerializeObject(@Model?.WeeklyPricesChart))
			} else if (value === 'monthly') {
				pricesChart.data = @Html.Raw(JsonConvert.SerializeObject(@Model?.MonthlyPricesChart))
			}

			pricesChart.update();
		}

		const onAssetsChartSelect = () => {
			const value = document.getElementById("assets-chart-select").value;

			if (value === 'value') {
				assetsChart.data = @Html.Raw(JsonConvert.SerializeObject(@Model?.AssetsByValue))
			} else if (value === 'shares') {
				assetsChart.data = @Html.Raw(JsonConvert.SerializeObject(@Model?.AssetsByShares))
			}

			assetsChart.update();
		}
	</script>
}